//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18449.
// 
#pragma warning disable 1591

namespace HIS.MedilinkWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MedilinkServiceSoap", Namespace="http://www.LinkSoft.com/MedilinkWS")]
    public partial class MedilinkService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback bIsValidUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback List_IDDepartmentsOfUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback List_DepartmentsOfUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListPatientOfDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseConnectionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MedilinkService() {
            this.Url = "http://192.168.1.168/MedilinkWS/MedilinkService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event bIsValidUserCompletedEventHandler bIsValidUserCompleted;
        
        /// <remarks/>
        public event List_IDDepartmentsOfUserCompletedEventHandler List_IDDepartmentsOfUserCompleted;
        
        /// <remarks/>
        public event List_DepartmentsOfUserCompletedEventHandler List_DepartmentsOfUserCompleted;
        
        /// <remarks/>
        public event ListPatientOfDepartmentCompletedEventHandler ListPatientOfDepartmentCompleted;
        
        /// <remarks/>
        public event CloseConnectionCompletedEventHandler CloseConnectionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LinkSoft.com/MedilinkWS/bIsValidUser", RequestNamespace="http://www.LinkSoft.com/MedilinkWS", ResponseNamespace="http://www.LinkSoft.com/MedilinkWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool bIsValidUser(string s_UserName, string s_Password) {
            object[] results = this.Invoke("bIsValidUser", new object[] {
                        s_UserName,
                        s_Password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void bIsValidUserAsync(string s_UserName, string s_Password) {
            this.bIsValidUserAsync(s_UserName, s_Password, null);
        }
        
        /// <remarks/>
        public void bIsValidUserAsync(string s_UserName, string s_Password, object userState) {
            if ((this.bIsValidUserOperationCompleted == null)) {
                this.bIsValidUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbIsValidUserOperationCompleted);
            }
            this.InvokeAsync("bIsValidUser", new object[] {
                        s_UserName,
                        s_Password}, this.bIsValidUserOperationCompleted, userState);
        }
        
        private void OnbIsValidUserOperationCompleted(object arg) {
            if ((this.bIsValidUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.bIsValidUserCompleted(this, new bIsValidUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LinkSoft.com/MedilinkWS/List_IDDepartmentsOfUser", RequestNamespace="http://www.LinkSoft.com/MedilinkWS", ResponseNamespace="http://www.LinkSoft.com/MedilinkWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string List_IDDepartmentsOfUser(string s_UserName) {
            object[] results = this.Invoke("List_IDDepartmentsOfUser", new object[] {
                        s_UserName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void List_IDDepartmentsOfUserAsync(string s_UserName) {
            this.List_IDDepartmentsOfUserAsync(s_UserName, null);
        }
        
        /// <remarks/>
        public void List_IDDepartmentsOfUserAsync(string s_UserName, object userState) {
            if ((this.List_IDDepartmentsOfUserOperationCompleted == null)) {
                this.List_IDDepartmentsOfUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnList_IDDepartmentsOfUserOperationCompleted);
            }
            this.InvokeAsync("List_IDDepartmentsOfUser", new object[] {
                        s_UserName}, this.List_IDDepartmentsOfUserOperationCompleted, userState);
        }
        
        private void OnList_IDDepartmentsOfUserOperationCompleted(object arg) {
            if ((this.List_IDDepartmentsOfUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.List_IDDepartmentsOfUserCompleted(this, new List_IDDepartmentsOfUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LinkSoft.com/MedilinkWS/List_DepartmentsOfUser", RequestNamespace="http://www.LinkSoft.com/MedilinkWS", ResponseNamespace="http://www.LinkSoft.com/MedilinkWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable List_DepartmentsOfUser(string khoaphong, string s_UserName) {
            object[] results = this.Invoke("List_DepartmentsOfUser", new object[] {
                        khoaphong,
                        s_UserName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void List_DepartmentsOfUserAsync(string khoaphong, string s_UserName) {
            this.List_DepartmentsOfUserAsync(khoaphong, s_UserName, null);
        }
        
        /// <remarks/>
        public void List_DepartmentsOfUserAsync(string khoaphong, string s_UserName, object userState) {
            if ((this.List_DepartmentsOfUserOperationCompleted == null)) {
                this.List_DepartmentsOfUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnList_DepartmentsOfUserOperationCompleted);
            }
            this.InvokeAsync("List_DepartmentsOfUser", new object[] {
                        khoaphong,
                        s_UserName}, this.List_DepartmentsOfUserOperationCompleted, userState);
        }
        
        private void OnList_DepartmentsOfUserOperationCompleted(object arg) {
            if ((this.List_DepartmentsOfUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.List_DepartmentsOfUserCompleted(this, new List_DepartmentsOfUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LinkSoft.com/MedilinkWS/ListPatientOfDepartment", RequestNamespace="http://www.LinkSoft.com/MedilinkWS", ResponseNamespace="http://www.LinkSoft.com/MedilinkWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ListPatientOfDepartment(string khoaphong) {
            object[] results = this.Invoke("ListPatientOfDepartment", new object[] {
                        khoaphong});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ListPatientOfDepartmentAsync(string khoaphong) {
            this.ListPatientOfDepartmentAsync(khoaphong, null);
        }
        
        /// <remarks/>
        public void ListPatientOfDepartmentAsync(string khoaphong, object userState) {
            if ((this.ListPatientOfDepartmentOperationCompleted == null)) {
                this.ListPatientOfDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListPatientOfDepartmentOperationCompleted);
            }
            this.InvokeAsync("ListPatientOfDepartment", new object[] {
                        khoaphong}, this.ListPatientOfDepartmentOperationCompleted, userState);
        }
        
        private void OnListPatientOfDepartmentOperationCompleted(object arg) {
            if ((this.ListPatientOfDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListPatientOfDepartmentCompleted(this, new ListPatientOfDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LinkSoft.com/MedilinkWS/CloseConnection", RequestNamespace="http://www.LinkSoft.com/MedilinkWS", ResponseNamespace="http://www.LinkSoft.com/MedilinkWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloseConnection() {
            this.Invoke("CloseConnection", new object[0]);
        }
        
        /// <remarks/>
        public void CloseConnectionAsync() {
            this.CloseConnectionAsync(null);
        }
        
        /// <remarks/>
        public void CloseConnectionAsync(object userState) {
            if ((this.CloseConnectionOperationCompleted == null)) {
                this.CloseConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseConnectionOperationCompleted);
            }
            this.InvokeAsync("CloseConnection", new object[0], this.CloseConnectionOperationCompleted, userState);
        }
        
        private void OnCloseConnectionOperationCompleted(object arg) {
            if ((this.CloseConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseConnectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void bIsValidUserCompletedEventHandler(object sender, bIsValidUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class bIsValidUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal bIsValidUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void List_IDDepartmentsOfUserCompletedEventHandler(object sender, List_IDDepartmentsOfUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class List_IDDepartmentsOfUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal List_IDDepartmentsOfUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void List_DepartmentsOfUserCompletedEventHandler(object sender, List_DepartmentsOfUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class List_DepartmentsOfUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal List_DepartmentsOfUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ListPatientOfDepartmentCompletedEventHandler(object sender, ListPatientOfDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListPatientOfDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListPatientOfDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CloseConnectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591